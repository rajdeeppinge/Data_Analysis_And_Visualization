clear;
close all;

% load the data from given .mat file
load('signal_lab1.mat');

L = length(signal1);    % length of original signal

Nq = 20;       % Nyquist rate 20 Hz

% 3 sampling rates
sampleRate_a = Nq/2;
sampleRate_b = Nq;
sampleRate_c = 4*Nq;

% uniformly sampled signals
sample_a = signal1(1 : abs(L/sampleRate_a) : L);     % L/sampleRate_a = delta_t, the time step in sampling

sample_b = signal1(1 : abs(L/sampleRate_b) : L);

sample_c = signal1(1 : abs(L/sampleRate_c) : L);


% plotting the sampled signals on original signal
% smaple 
figure
plot(signal1)
hold on
plot( (1 : abs(L/sampleRate_a) : L), sample_a, 'r+')
title('Sampling Signal1 at sampling rate = Nyquist rate/2')
xlabel('Time (ms)')
ylabel('Amplitude of signal1')

figure
plot(signal1)
hold on
plot( (1 : abs(L/sampleRate_b) : L), sample_b, 'r+')
title('Sampling Signal1 at sampling rate = Nyquist rate')
xlabel('Time (ms)')
ylabel('Amplitude of signal1')

figure
plot(signal1)
hold on
plot( (1 : abs(L/sampleRate_c) : L), sample_c, 'r+')
title('Sampling Signal1 at sampling rate = 4*Nyquist rate')
xlabel('Time (ms)')
ylabel('Amplitude of signal1')




%%%%%%%%%%%%%% Part 3 Interpolating to get original signal %%%%%%%%%%%%%%%%

% time intervals for each case
time_a = (1 : abs(L/sampleRate_a) : L);
time_b = (1 : abs(L/sampleRate_b) : L);
time_c = (1 : abs(L/sampleRate_c) : L);

% perform linear interpolation over sampled data in each case
regen_a = interp1(time_a, sample_a, 1:L);
regen_b = interp1(time_b, sample_b, 1:L);
regen_c = interp1(time_c, sample_c, 1:L);

% plot the interpolated signals
figure
plot(signal1)
hold on
plot(regen_a, 'r')
title('Reconstructed Signal1 at sampling rate = Nyquist rate/2')
xlabel('Time (ms)')
ylabel('Amplitude of signal1')

figure
plot(signal1)
hold on
plot(regen_b, 'r')
title('Reconstructed Signal1 at sampling rate = Nyquist rate')
xlabel('Time (ms)')
ylabel('Amplitude of signal1')

figure
plot(signal1)
hold on
plot(regen_c, 'r')
title('Reconstructed Signal1 at sampling rate = 4*Nyquist rate')
xlabel('Time (ms)')
ylabel('Amplitude of signal1')




%%%%%%%%%%%%% computing reconstruction error %%%%%%%%%%%%%%

% Here we are taking the error to be the mean squared error MSE

% variables storing total squared error
totalError_a = 0;
totalError_b = 0;
totalError_c = 0;

% calculating the number of elements of array which have been interpolated
% successf
elem_a = 0;
elem_b = 0;
elem_c = 0;

for i = 1:L 
    if ~isnan(regen_a(i))   % check if the interpolation has happened
        totalError_a = totalError_a + (signal1(i) - regen_a(i)) * (signal1(i) - regen_a(i));
        elem_a = elem_a + 1;
    else
        break
    end
end
 
MSE_a = totalError_a / elem_a;

for i = 1:L
    if ~isnan(regen_b(i))
        totalError_b = totalError_b + (signal1(i) - regen_b(i)) * (signal1(i) - regen_b(i));
        elem_b = elem_b + 1;
    end
end 

MSE_b = totalError_b / elem_b;

for i = 1:L    
    if ~isnan(regen_c(i))
        totalError_c = totalError_c + (signal1(i) - regen_c(i)) * (signal1(i) - regen_c(i));
        elem_c = elem_c + 1;
    else
        break
    end
end

MSE_c = totalError_c / elem_c;
